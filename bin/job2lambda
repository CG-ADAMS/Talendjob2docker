#!/usr/bin/env bash

set -e
set -u
set -o pipefail

job2lambda_path=$(readlink -e "${BASH_SOURCE[0]}")
job2lambda_dir="${job2lambda_path%/*}"

source "${job2lambda_dir}/tcf-env.sh"

#source util.sh
source "${job2lambda_dir}/${UTIL_RELATIVE_PATH}util${RESOURCE_VERSION}.sh"

#source "tcf-package.sh"
source "${job2lambda_dir}/tcf-package${RESOURCE_VERSION}.sh"

define usage <<EOF
Repackage a standard Talend job zip file as a Layer and publish to AWS Lambda using the aws lambda publish-layer-version command.

See https://docs.aws.amazon.com/cli/latest/reference/lambda/publish-layer-version.html

./job2lambda <s3_bucket> <job_zip_path> [ <job_zip_target_dir> [ <working_dir> [ <description> [ <license> ] ] ] ]

s3_bucket:    s3 bucket where lambda layer will be stored 
job_zip_path: the path to the talend job zip file

The Talend job zip file located at job_zip_path is unzipped and modified in the working_dir.
The packaged job layer file is stored in the job_zip_target_dir before being copied to s3_bucket.
The description and license parameters are passed along with the s3 zip file location to the Lambda Layer service.

Talend Job naming conventions result in the job_zip_path file name being something like

    <job_root>_<job_version>.zip

Note that the Talend job version does not necessarily match the git version.
The Talend version may be set in the Job properties.

The job will be published to the s3_bucket in a folder named <job_root>.
For example, the local job zip file
    mypath/Spring_Resources_RDS_0.1.zip 
would be published to 
    s3://eost-lambda/Spring_Resources_RDS/Spring_Resources_RDS_0.1.zip

Note that publishing a Job layer will result in overwriting the S3 target each time.
This is fine since the s3 target is just a staging location.
AWS Lambda automatically versions all Layers.

EOF

if [ "${1:-}" == "-h" ] || [ "${1:-}" == "--h" ] || [ "${1:-}" == "-help" ] || [ "${1:-}" == "--help" ] || [ "${1:-}" == "-?" ] ; then
    echo "${usage}"
    exit
fi

declare s3_bucket="${1:-}"
declare job_zip_path="${2:-}"
declare job_zip_target_dir="${3:-${PWD}}"
declare working_dir="${4:-}"
declare description="${5:-no description provided}"
declare license="${6:-no license specified}"

required s3_bucket job_zip_path

export INFO_LOG=true
export DEBUG_LOG=true

declare aws_command
which aws
if [ $? -ne 0 ]; then
   aws_command="/opt/aws"
else
   aws_command="aws"
fi

${aws_command} --version
python --version
python2 --version
python3 --version
python2.7 --version
python3.7 --version

declare job_file_name
declare job_file_root
declare job_root
declare job_root_pattern="_+([0-9])\.+([0-9])*"
# "-+([0-9])\.+([0-9])\.+([0-9])*"

parse_job_zip_path "${job_zip_path}" "${job_root_pattern}" job_file_name job_file_root job_root

debugVar job_zip_path
debugVar job_file_name
debugVar job_file_root
debugVar job_root

infoLog "Creating lambda layer zip file: job_to_lambda '${job_zip_path}' '${job_zip_target_dir}' '${working_dir}'" 
job_to_lambda "${job_zip_path}" "${job_zip_target_dir}" "${working_dir}"

infoLog "Copying lambda layer zip file to s3: ${aws_command} s3 cp '${job_zip_target_dir}/${job_file_root}.zip' 's3://${s3_bucket}/${job_root}/${job_file_name}'"
"${aws_command}" s3 cp "${job_zip_target_dir}/${job_file_root}.zip" "s3://${s3_bucket}/${job_root}/${job_file_name}"

cat <<EOF

Creating lambda layer:

${aws_command} lambda publish-layer-version \
    --layer-name "${job_root}" \
    --description "${description}" \
    --license-info "${license}" \
    --compatible-runtimes "java8" \
    --content "S3Bucket=${s3_bucket},S3Key=${job_root}/${job_file_name}"

EOF


declare layer_version_arn

layer_version_arn=(${aws_command} lambda publish-layer-version \
    --layer-name "${job_root}" \
    --description "${description}" \
    --license-info "${license}" \
    --compatible-runtimes "java8" \
    --content "S3Bucket=${s3_bucket},S3Key=${job_root}/${job_file_name}") > job2lambda.out

cat job2lambda.out | jq .LayerVersionArn

infoLog "Finished"

